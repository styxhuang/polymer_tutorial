Using molecular simulation to estimate Young's modulus with GROMACS software
author: Ming Huang

Before you start this project, some terms you need to check online and get understand:
-- Periodic boundary conditions (PBC)
-- Equilibrium simulation (EMD) and non-Equilibrium simulation (NEMD)

In this little project you need to finish the following tasks:
--> Equilibrate initial structure 'eql.gro' at 300K
--> Non-equilibrium simulations (x, y and z directions)
    --> Use bash script to automatically excute mutiple commands (Check tmp.sh)
    --> Conduct NEMD simulation along x, y and z directions at 300K
    --> Extract pressure tensor and box length from the energy files
--> Using python script to analyze the pressure tensor and box length change which from the energy file (Transfer them to stress and strain)
    --> Using python script to extract needed data from x direction's energy file		
	--> Using python script to plot the stress and strain curve (Test for stress only along x direction)
            --> Fit the stress value with 1%, 2% and 5% strain range, and plot the line on the figure
	        --> Do the same analysis for y and z directions

--> Equilibrate the initial structure ('eql.gro') at 600K and do the NEMD simulation as described above and do the Young's modulus estimation.
    -- Since the initial system is a Vinyl ester/Styrene system, which glass transition temperature is around 420K, 300K is deep in the glassy state and 600K is a rubbery state. Young's modulus is different under this two temperatures. The difference should be consisted with the experiment trends)

--> (optional) Use the same initial structures, and conduct the NEMD along x, y and z. Each direction conduct 5 times, and in the end, along each direction you can get 5 different energy files. Using python script to extract data from all directions' file(x, y and z seperately) and merge the pressure tensor data (x, y and z)
    --> Do the similar above analysis steps and compare the difference

--> (optional) Conduct the NEMD with different strain rates (be aware of the different between strain rate and deformation rate) and compare the difference between Young's modulus

--> (optional) Developed a moving average function in the python scripts, and compare the analysis results with data using block average
    --> Need a test case to confirm the moving average fucntion is right

Detail Procedures:
1. Equilibrate the initial structure 'eql.gro'
-- This step is used to relax the initial structure and equilibrate the structure at given temperature and pressure (The temperature and pressure should be the same as following formal simulations, such as for measuring glassy modulus, T should be set to 300K, 1bar pressure)
    -- Using EM simulation to relax structure. (emtol set to 10, check if the system can be converged to the set value)
    -- Using NPT or NVT simulation to equilibrate system

NOTE: To justify whether a system is well equilibrated, you should check system's pressure/volume, potential energy, total energy. Every value needs to be converged. (Converged means it will become a flat plateau and fluctuate around one value). You need to tune the MD simulation time to make sure above values become converged and generate the plot to show they have been converged. The 'npt.mdp' file is just an example, the simulation time in it cannot promise the system has been converged. Also be awared the temperature(ref-T) and pressure(ref-P) should be consisted with following formal simulation. For example, if you want to test glassy Young's modulus, the ref-T should set to 300K (lower than the glass transition temperature). And ref-P set to 1bar

-- The GMX commands you may need
gmx grompp -f *.mdp -c *.gro -p *.top -o (name) -maxwarn 10
gmx mdrun -deffnm name -v -rdd 0.5 (this -rdd option is necessary to add, since there are bonds across the boundary, GMX cannot automatically help you slice the whole box and do the parallel MD simulations, this option can help it do the slice work)

2. Non-equilibrium MD simulations
-- Non-equilibrium simulations is a general called of a type of simulations(such as uniaxial elongation simulation, steered molecular simulation). If you want to know more details you can read this paper ([1]). In my words, non-equilibrium simulaition is people introduced some external perturbations (or in another word 'energy') to the system, to make the object start moving along the direction that people want. 
In this study, to simulate the procedure that people use to test material Young's modulus, we need to simulate the procedure that apply a force on the material and make it stretch. To do this, we need to conduct a type of MD simulation called non-equilibrium simulation on our simulation box. This procedure you can call it a uniaxial elongation simulations, which simulate the procedure that stretch the simulation box along one directions. To get more undertands on this procedure, you can read following two articles ([2], [3]).

-- The mdp files ('npt-x.mdp', 'npt-y.mdp', 'npt-z.mdp') can help you do this NEMD using GROMACS. Some places you need to take care
    -- Simulation time is depended on the how much the strain you want to obtain. You should understand the relation among strain rate, system size, time step and simulation time. Usually we just need at most strain = 0.2 (20% strain)
    -- Notice the differences of the mdp files between an EMD and an NEMD (You can use command 'vimdiff npt.mdp npt-x.mdp' to view the difference between files)
    -- Temperature should be consistant with one you conduct equilbirate simulation (Glassy modulus is 300K and rubbery modulus is 600K)
    -- Pressure and compressibility along the pulling direction should be set to zero
    -- In the "deform" option, the velocity you set is the box deformation rate. Get more details on http://manual.gromacs.org/archive/5.0/online/mdp_opt.html
    -- Conduct your NEMD simulations along x, y and z direction under strain rate = 1e9
    -- After NEMD simulations are finished, extract the pressure tensor pxx, pyy and pzz from corresponding .edr files using "gmx_energy" command (maybe some others like gmx energy or gmx_mpi energy)

NOTES: 
-- Be aware of the unit of different values. For the unit of deformation rate is (nm/ps), box length (nm), timestep(ps). It will help calculate the total simulation time you need to obtain the goal strain
-- Pay attention on the nstxtcout and nstenergy options. If you want to visualize the changing of the system during the simulation, you can lower nstxtcout, but meantime the output file size will become bigger. If you want to get more dense energy data point, you can decrease the nstenergy. Both options' unit are steps (nstxtcout = 10, means save a frame every 10 steps)
-- The pressure coupling method here uses "Parrinello-Rahman" instead of "Berendsen", since we need a more accurate method to calculate pressure

3. Using python script to analyze the pressure tensor and the box length change 
-- Using file 300-sim3-x-pressure-*xvg to do the Young's modulus calculation
    -- In the file "300-sim3-x-pressure-box.xvg", it contains the data, box length changes with time
    -- In the file "300-sim3-x-pressure-frc.xvg", it contains the data, pressure changes with time (along x directions)

-- Following steps need to be finished in the python scripts: (all steps should be seperated into different functions and left notes on each function to briefly introduce the function usage)
    -- Read the pxx data from the file "300-sim3-pressure-frc.xvg" and save the data to a list which called as pxx
    -- Read the x distance data from the file "300-sim3-pressure-box.xvg" and save the data to a list which called as x_dist
    -- Get the initial simulation box length l0 and use the equation (l-l0)/l0 to calculate the strain. Save this to the list x_strain
    -- Stress = -pxx and save stress data to the list x_stress
    -- Plot the x_stress vs x_strain
    -- Using block average to clean the noise
    -- Extract the data after the average (stress and strain) within range x_strain < 0.01(0.02, 0.05) and save to the list x_fit
    -- Do the linear fit on the data in the x_fit
    -- Plot the average data, with the linear fit functions (0.01, 0.02 and 0.05 strain)
    -- All figures should be saved as '.png' file format, with xlabel, ylabel and title
    -- Script 'youngs.py' is an example python3 script to help you obtain the youngs modulus from the origin data file. It doesn't work for analysing particular files, but you can find corresponding functions in the file.

Cited papers
[1] Nonequilibrium molecular dynamics, Wm.G.Hoover, C.G.Hoover, Condensed Matter Physics, 2005, Vol. 8, No. 2(42), pp. 247â€“260.
[2] High strain rate mechanical properties of a cross-linked epoxy across the glass transition, Timothy Sirk, Ketan Khare, Rajesh Khare, Plymer 54(2013) 7048-7057
[3] Molecular dynamics simulations of uniaxial deformation of thermoplastic polyimides, V. M. Nazarychev, S. V. Lyulin, SoftMatter, 2016, 12, 3972

